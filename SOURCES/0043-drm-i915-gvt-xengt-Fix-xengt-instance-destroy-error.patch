From 566389fe9649990353da93e918ecc708754fedf7 Mon Sep 17 00:00:00 2001
From: Xiong Zhang <xiong.y.zhang@intel.com>
Date: Tue, 16 Jan 2018 22:47:09 +0800
Subject: [PATCH 43/45] drm/i915/gvt/xengt: Fix xengt instance destroy error

Currently in xengt_instance_destroy() function, xengt_hvm_dev is destroyed
first, then vgpu is destroyed. But vgpu_destroy() call xengt service which
has been destroyed. So error message occur in demsg.

This patch change xengt instance destroy order, vgpu_destroy() is called
first, then destroy xengt service.

Signed-off-by: Xiong Zhang <xiong.y.zhang@intel.com>
---
 drivers/gpu/drm/i915/gvt/xengt.c | 36 +++++++++++++++---------------------
 1 file changed, 15 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/xengt.c b/drivers/gpu/drm/i915/gvt/xengt.c
index c10ff55..2b086ac 100644
--- a/drivers/gpu/drm/i915/gvt/xengt.c
+++ b/drivers/gpu/drm/i915/gvt/xengt.c
@@ -1024,11 +1024,10 @@ static int xengt_hvm_vmem_init(struct intel_vgpu *vgpu)
 	return -ENOMEM;
 }
 
-static void xengt_vmem_destroy(struct intel_vgpu *vgpu)
+static void xengt_vmem_destroy(struct xengt_hvm_dev *info)
 {
 	int i, j;
 	unsigned long nr_low_1mb_bkt, nr_high_bkt, nr_high_bkt_4k;
-	struct xengt_hvm_dev *info = (struct xengt_hvm_dev *)vgpu->handle;
 
 	if (!info || info->vm_id == 0)
 		return;
@@ -1369,23 +1368,19 @@ static int xengt_emulation_thread(void *priv)
 	return 0;
 }
 
-static inline void xengt_raise_emulation_request(struct intel_vgpu *vgpu,
+static inline void xengt_raise_emulation_request(struct xengt_hvm_dev *info,
 	int vcpu)
 {
-	struct xengt_hvm_dev *info = (struct xengt_hvm_dev *)vgpu->handle;
-
 	set_bit(vcpu, info->ioreq_pending);
 	wake_up(&info->io_event_wq);
 }
 
 static irqreturn_t xengt_io_req_handler(int irq, void *dev)
 {
-	struct intel_vgpu *vgpu;
 	struct xengt_hvm_dev *info;
 	int vcpu;
 
-	vgpu = (struct intel_vgpu *)dev;
-	info = (struct xengt_hvm_dev *)vgpu->handle;
+	info = (struct xengt_hvm_dev *)dev;
 
 	for (vcpu = 0; vcpu < info->nr_vcpu; vcpu++) {
 		if (info->evtchn_irq[vcpu] == irq)
@@ -1398,7 +1393,7 @@ static irqreturn_t xengt_io_req_handler(int irq, void *dev)
 		return IRQ_NONE;
 	}
 
-	xengt_raise_emulation_request(vgpu, vcpu);
+	xengt_raise_emulation_request(info, vcpu);
 
 	return IRQ_HANDLED;
 }
@@ -1419,15 +1414,19 @@ static void xengt_logd_destroy(struct xengt_hvm_dev *info)
 
 void xengt_instance_destroy(struct intel_vgpu *vgpu)
 {
-	struct xengt_hvm_dev *info;
+	struct xengt_hvm_dev *info = NULL;
 	int vcpu;
 
-	intel_gvt_ops->vgpu_deactivate(vgpu);
+	if (vgpu) {
+		info = (struct xengt_hvm_dev *)vgpu->handle;
+		intel_gvt_ops->vgpu_deactivate(vgpu);
+		intel_gvt_ops->vgpu_destroy(vgpu);
+	}
 
-	info = (struct xengt_hvm_dev *)vgpu->handle;
 	if (info == NULL)
-		goto free_vgpu;
+		return;
 
+	info->vgpu = NULL;
 	info->on_destroy = true;
 	if (info->emulation_thread != NULL)
 		kthread_stop(info->emulation_thread);
@@ -1445,7 +1444,7 @@ void xengt_instance_destroy(struct intel_vgpu *vgpu)
 
 	for (vcpu = 0; vcpu < info->nr_vcpu; vcpu++) {
 		if (info->evtchn_irq[vcpu] >= 0)
-			unbind_from_irqhandler(info->evtchn_irq[vcpu], vgpu);
+			unbind_from_irqhandler(info->evtchn_irq[vcpu], info);
 	}
 
 	if (info->iopage_vma != NULL) {
@@ -1461,13 +1460,8 @@ void xengt_instance_destroy(struct intel_vgpu *vgpu)
 
 out1:
 	xengt_logd_destroy(info);
-	xengt_vmem_destroy(vgpu);
-	vgpu->handle = (unsigned long)NULL;
+	xengt_vmem_destroy(info);
 	kfree(info);
-
-free_vgpu:
-	if (vgpu)
-		intel_gvt_ops->vgpu_destroy(vgpu);
 }
 
 struct intel_vgpu *xengt_instance_create(domid_t vm_id,
@@ -1532,7 +1526,7 @@ struct intel_vgpu *xengt_instance_create(domid_t vm_id,
 		irq = bind_interdomain_evtchn_to_irqhandler(vm_id,
 				info->iopage->vcpu_ioreq[vcpu].vp_eport,
 				xengt_io_req_handler, 0,
-				"xengt", vgpu);
+				"xengt", info);
 		if (irq < 0) {
 			rc = irq;
 			gvt_err("Failed to bind event channle: %d\n", rc);
-- 
2.7.4

