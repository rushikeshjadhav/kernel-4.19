From 38ede72835c7c31352c3dfb9f605a7d5c029caae Mon Sep 17 00:00:00 2001
From: Xiong Zhang <xiong.y.zhang@intel.com>
Date: Sat, 15 Sep 2018 00:01:34 +0800
Subject: [PATCH 41/45] drm/i915/gvt: Fix a command corruption caused by live
 migration patch

Patch "72060b2c0969 drm/i915/gvt: Patch the gma in gpu commands during
command parser" will patch gma address in command buffer, this patch will
clear gma_address[1:0] and set gma_address[31:0]. But some command use
gma_address[2] and gma_address[1], then this patch will corrupt these
command. Such as MI_FLUSH_DW use gma_address[2] to store gtt or ppgtt
address space, MI_STORE_DATA_IMM use gam_address[1] to store an offset
flag.

This patch add a mask parameter at patch gma_address.

Signed-off-by: Xiong Zhang <xiong.y.zhang@intel.com>
---
 drivers/gpu/drm/i915/gvt/cmd_parser.c | 64 +++++++++++++++++++++++------------
 1 file changed, 43 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/cmd_parser.c b/drivers/gpu/drm/i915/gvt/cmd_parser.c
index 9433e21..b87d84c 100644
--- a/drivers/gpu/drm/i915/gvt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/gvt/cmd_parser.c
@@ -985,7 +985,10 @@ static int cmd_handler_lrr(struct parser_exec_state *s)
 
 static inline int cmd_address_audit(struct parser_exec_state *s,
 				    unsigned long guest_gma, int op_size,
-				    bool index_mode, int offset);
+				    bool index_mode);
+static inline void patch_gma(struct parser_exec_state *s,
+			     unsigned long guest_gma, unsigned int offset,
+			     unsigned int mask);
 
 static int cmd_handler_lrm(struct parser_exec_state *s)
 {
@@ -1007,10 +1010,10 @@ static int cmd_handler_lrm(struct parser_exec_state *s)
 			gma = cmd_gma(s, i + 1);
 			if (gmadr_bytes == 8)
 				gma |= (cmd_gma_hi(s, i + 2)) << 32;
-			ret |= cmd_address_audit(s, gma, sizeof(u32),
-						 false, i + 1);
+			ret |= cmd_address_audit(s, gma, sizeof(u32), false);
 			if (ret)
 				break;
+			patch_gma(s, gma, i + 1, GENMASK(31, 2));
 		}
 		i += gmadr_dw_number(s) + 1;
 	}
@@ -1032,10 +1035,11 @@ static int cmd_handler_srm(struct parser_exec_state *s)
 			gma = cmd_gma(s, i + 1);
 			if (gmadr_bytes == 8)
 				gma |= (cmd_gma_hi(s, i + 2)) << 32;
-			ret |= cmd_address_audit(s, gma, sizeof(u32),
-						 false, i + 1);
+			ret |= cmd_address_audit(s, gma, sizeof(u32), false);
 			if (ret)
 				break;
+
+			patch_gma(s, gma, i + 1, GENMASK(31, 2));
 		}
 		i += gmadr_dw_number(s) + 1;
 	}
@@ -1105,7 +1109,9 @@ static int cmd_handler_pipe_control(struct parser_exec_state *s)
 				if (cmd_val(s, 1) & (1 << 21))
 					index_mode = true;
 				ret |= cmd_address_audit(s, gma, sizeof(u64),
-						index_mode, 2);
+							 index_mode);
+				if (!ret)
+					patch_gma(s, gma, 2, GENMASK(31, 2));
 			}
 		}
 	}
@@ -1434,14 +1440,29 @@ static unsigned long get_gma_bb_from_cmd(struct parser_exec_state *s, int index)
 	return addr;
 }
 
+static inline void patch_gma(struct parser_exec_state *s,
+			     unsigned long guest_gma, unsigned int offset,
+			     unsigned int mask)
+{
+	struct intel_vgpu *vgpu = s->vgpu;
+	int gmadr_bytes = vgpu->gvt->device_info.gmadr_bytes_in_cmd;
+	u64 host_gma;
+
+	intel_gvt_ggtt_gmadr_g2h(vgpu, guest_gma, &host_gma);
+
+	patch_value(s, cmd_ptr(s, offset),
+		    (host_gma & mask) | (cmd_val(s, offset) & (~mask)));
+	if (gmadr_bytes == 8)
+		patch_value(s, cmd_ptr(s, offset + 1),
+			    (host_gma >> 32) & GENMASK(15, 0));
+}
+
 static inline int cmd_address_audit(struct parser_exec_state *s,
 				    unsigned long guest_gma, int op_size,
-				    bool index_mode, int offset)
+				    bool index_mode)
 {
 	struct intel_vgpu *vgpu = s->vgpu;
 	u32 max_surface_size = vgpu->gvt->device_info.max_surface_size;
-	int gmadr_bytes = vgpu->gvt->device_info.gmadr_bytes_in_cmd;
-	u64 host_gma;
 	int i;
 	int ret;
 
@@ -1459,14 +1480,6 @@ static inline int cmd_address_audit(struct parser_exec_state *s,
 	} else if (!intel_gvt_ggtt_validate_range(vgpu, guest_gma, op_size)) {
 		ret = -EFAULT;
 		goto err;
-	} else
-		intel_gvt_ggtt_gmadr_g2h(vgpu, guest_gma, &host_gma);
-
-	if (offset > 0) {
-		patch_value(s, cmd_ptr(s, offset), host_gma & GENMASK(31, 2));
-		if (gmadr_bytes == 8)
-			patch_value(s, cmd_ptr(s, offset + 1),
-				(host_gma >> 32) & GENMASK(15, 0));
 	}
 
 	return 0;
@@ -1511,7 +1524,11 @@ static int cmd_handler_mi_store_data_imm(struct parser_exec_state *s)
 		gma = (gma_high << 32) | gma_low;
 		core_id = (cmd_val(s, 1) & (1 << 0)) ? 1 : 0;
 	}
-	ret = cmd_address_audit(s, gma + op_size * core_id, op_size, false, 1);
+
+	ret = cmd_address_audit(s, gma + op_size * core_id, op_size, false);
+	if (!ret)
+		patch_gma(s, gma, 1, GENMASK(31, 2));
+
 	return ret;
 }
 
@@ -1555,7 +1572,10 @@ static int cmd_handler_mi_op_2f(struct parser_exec_state *s)
 		gma_high = cmd_val(s, 2) & GENMASK(15, 0);
 		gma = (gma_high << 32) | gma;
 	}
-	ret = cmd_address_audit(s, gma, op_size, false, 1);
+	ret = cmd_address_audit(s, gma, op_size, false);
+	if (!ret)
+		patch_gma(s, gma, 1, GENMASK(31, 2));
+
 	return ret;
 }
 
@@ -1595,9 +1615,11 @@ static int cmd_handler_mi_flush_dw(struct parser_exec_state *s)
 		/* Store Data Index */
 		if (cmd_val(s, 0) & (1 << 21))
 			index_mode = true;
-		ret = cmd_address_audit(s, (gma | (1 << 2)),
-					sizeof(u64), index_mode, 1);
+		ret = cmd_address_audit(s, gma, sizeof(u64), index_mode);
+		if (!ret)
+			patch_gma(s, gma, 1, GENMASK(31, 3));
 	}
+
 	/* Check notify bit */
 	if ((cmd_val(s, 0) & (1 << 8)))
 		set_bit(cmd_interrupt_events[s->ring_id].mi_flush_dw,
-- 
2.7.4

