From 521ad7decdfc4fc40f7c0afa1da592c3aa86d66c Mon Sep 17 00:00:00 2001
From: Yulei Zhang <yulei.zhang@intel.com>
Date: Wed, 30 Aug 2017 10:47:22 +0800
Subject: [PATCH 21/45] drm/i915/gvt: Add dev node for vGPU state save/restore
 in XENGT

Create node "device_state" for vGPU state save and restore which
is used for vGPU live migration in XENGT.

Signed-off-by: Yulei Zhang <yulei.zhang@intel.com>
---
 drivers/gpu/drm/i915/gvt/xengt.c | 75 ++++++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/gvt/xengt.h |  1 +
 2 files changed, 76 insertions(+)

diff --git a/drivers/gpu/drm/i915/gvt/xengt.c b/drivers/gpu/drm/i915/gvt/xengt.c
index 0a8668c..1c2b130 100644
--- a/drivers/gpu/drm/i915/gvt/xengt.c
+++ b/drivers/gpu/drm/i915/gvt/xengt.c
@@ -125,6 +125,66 @@ static struct kobj_type xengt_ctrl_ktype = {
 	.default_attrs = xengt_ctrl_attrs,
 };
 
+static ssize_t
+device_state_read(struct file *filp, struct kobject *kobj,
+		struct bin_attribute *bin_attr,
+		char *buf, loff_t off, size_t count)
+{
+	struct xengt_hvm_dev *info = container_of((kobj), struct xengt_hvm_dev, kobj);
+	struct intel_vgpu *vgpu = info->vgpu;
+	void *base = info->dev_state;
+
+	if (!count || off < 0 || (off + count > bin_attr->size) || (off & 0x3))
+		return -EINVAL;
+
+	if (info->dev_state == NULL)
+		return -EINVAL;
+
+	if (intel_gvt_ops->vgpu_save_restore(vgpu,
+			buf, count, base, 0, false) != 0)
+		return -EINVAL;
+
+	memcpy(buf, base + off, count);
+
+	return count;
+}
+
+static ssize_t
+device_state_write(struct file *filp, struct kobject *kobj,
+		struct bin_attribute *bin_attr,
+		char *buf, loff_t off, size_t count)
+{
+	struct xengt_hvm_dev *info = container_of((kobj), struct xengt_hvm_dev, kobj);
+	struct intel_vgpu *vgpu = info->vgpu;
+	void *base = info->dev_state;
+
+	if (!count || off < 0 || (off + count > bin_attr->size) || (off & 0x3))
+		return -EINVAL;
+
+	if (info->dev_state == NULL)
+		return -EINVAL;
+
+	memcpy(base + off, buf, count);
+
+	if ((off + count) == bin_attr->size) {
+		if (intel_gvt_ops->vgpu_save_restore(vgpu,
+				buf, count, base, 0, true) != 0)
+			return -EINVAL;
+	}
+
+	return count;
+}
+
+static struct bin_attribute vgpu_state_attr = {
+	.attr =	{
+		.name = "device_state",
+		.mode = 0660
+	},
+	.size = MIGRATION_IMG_MAX_SIZE,
+	.read = device_state_read,
+	.write = device_state_write,
+};
+
 static struct intel_vgpu_type *xengt_choose_vgpu_type(
 		struct xengt_hvm_params *vp)
 {
@@ -175,6 +235,12 @@ static int xengt_sysfs_add_instance(struct xengt_hvm_params *vp)
 			gvt_err("%s: kobject add error: %d\n", __func__, ret);
 			kobject_put(&info->kobj);
 		}
+
+		ret = sysfs_create_bin_file(&info->kobj, &vgpu_state_attr);
+		if (ret) {
+			gvt_err("%s: kobject add error: %d\n", __func__, ret);
+			kobject_put(&info->kobj);
+		}
 	}
 
 	return ret;
@@ -1306,6 +1372,9 @@ void xengt_instance_destroy(struct intel_vgpu *vgpu)
 
 	kfree(info->evtchn_irq);
 
+	if (info->dev_state)
+		vfree(info->dev_state);
+
 out1:
 	xengt_vmem_destroy(vgpu);
 	vgpu->handle = (unsigned long)NULL;
@@ -1355,6 +1424,12 @@ struct intel_vgpu *xengt_instance_create(domid_t vm_id,
 	for (vcpu = 0; vcpu < info->nr_vcpu; vcpu++)
 		info->evtchn_irq[vcpu] = -1;
 
+	info->dev_state = vzalloc(MIGRATION_IMG_MAX_SIZE);
+	if (info->dev_state == NULL) {
+		rc = -ENOMEM;
+		goto err;
+	}
+
 	rc = xen_hvm_map_pcidev_to_ioreq_server(info,
 			PCI_BDF2(0, 0x10));//FIXME hack the dev bdf
 	if (rc < 0)
diff --git a/drivers/gpu/drm/i915/gvt/xengt.h b/drivers/gpu/drm/i915/gvt/xengt.h
index 0f5b660..c9fdb44 100644
--- a/drivers/gpu/drm/i915/gvt/xengt.h
+++ b/drivers/gpu/drm/i915/gvt/xengt.h
@@ -44,6 +44,7 @@ struct xengt_hvm_dev {
 	/* for >1MB memory of HVM: each vm_struct means 4KB */
 	struct vm_struct **vmem_vma_4k;
 	unsigned long low_mem_max_gpfn;
+	void *dev_state;
 };
 
 struct xengt_hvm_params {
-- 
2.7.4

